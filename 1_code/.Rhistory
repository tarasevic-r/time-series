d2_subset <- subset(d2, d2$timestamp > period_start_2
& d2$timestamp < period_end_2)
#' Both signals subsets graph
#+ echo = FALSE
plot(x = d1_subset$timestamp, d1_subset$value
,main = paste(sensor_id_1,'\n', period_start_1, '-', period_end_1)
,xlab = "time"
,ylab = "value"
,type = 'l')
d1_subset$timestamp
d1_subset
d2_subset
# plot SENSOR 1 signal to choose subset
plotly::plot_ly(
y = d1$value
,x = d1$timestamp
, type = 'scatter'
, mode = 'lines'
)
#' Define period for vector **to learn** in first signal
period_start_1 <- "2019-03-05 11:00:00" # YYYY-MM-DD hh:mm:ss
period_end_1 <- "2019-03-05 12:00:00" # YYYY-MM-DD hh:mm:ss
#' Define period from second signal where to **find learned** signal
period_start_2 <- "2019-03-14 19:00:00" # YYYY-MM-DD hh:mm:ss
period_end_2 <- "2019-03-17 10:00:00" # YYYY-MM-DD hh:mm:ss
step_size = 4 # step size for discretization in seconds
#+ echo = FALSE
same_period = F # T for same period measuring
diff(results$`time end`, results$`time start`)
diff(results[,2], results[,1])
difftime(results[,2], results[,1])
dw = length(d1_smoth)
dw*step_size
# Write sensor id
sensor_id_1 <- 'T7_800_R6292' # define 1st sensor id
sensor_id_2 <- 'T7_800_R6292' # define 2nd sensor id
#### Required packages ####
source("packages.R")
##### Load data ####
source("0_load_rhdf5.R")
#### Full signals statistics ####
source("0_statistics_overview.R")
#### discretiez signals ####
# source("0_discretize.R")
# plot SENSOR 1 signal to choose subset
plotly::plot_ly(
y = d1$value
,x = d1$timestamp
, type = 'scatter'
, mode = 'lines'
)
# # plot SENSOR 2 signal to choose subset
# plotly::plot_ly(
#   y = d2$value
#   ,x = d2$timestamp
#   , type = 'scatter'
#   , mode = 'lines'
# )
#
#
# # Define period for first signal YYYY-MM-DD hh:mm:ss
# period_start_1 <- "2019-02-08 11:10:00"
# period_end_1 <- "2019-02-08 18:00:00"
#
# # Define period for second signal YYYY-MM-DD hh:mm:ss
# period_start_2 <- "2019-02-06 16:00:00"
# period_end_2 <- "2019-02-07 18:00:00"
#' Define period for vector **to learn** in first signal
period_start_1 <- "2019-02-24 02:00:00" # YYYY-MM-DD hh:mm:ss
period_end_1 <- "2019-02-24 10:00:00" # YYYY-MM-DD hh:mm:ss
sensor_id_1 <- 'T7_800_R6292' # define 1st sensor
sensor_id_2 <- 'T7_800_R6292' # define 2nd sensor
#' Define period for vector **to learn** in first signal
period_start_1 <- "2019-02-24 02:00:00" # YYYY-MM-DD hh:mm:ss
period_end_1 <- "2019-02-24 07:00:00" # YYYY-MM-DD hh:mm:ss
#' Define period from second signal where to **find learned** signal
period_start_2 <- "2019-03-03 12:00:00" # YYYY-MM-DD hh:mm:ss
period_end_2 <- "2019-03-07 00:00:00" # YYYY-MM-DD hh:mm:ss
step_size = 4 # step size for discretization in seconds
#+ echo = FALSE
same_period = F # T for same period measuring
# Load data
plot = FALSE
# echo=F, message=F
source("load_rhdf5.R")
#+ echo = FALSE, fig.height = 3
source("plot-subset.R")
#' Define period for vector **to learn** in first signal
period_start_1 <- "2019-02-24 01:00:00" # YYYY-MM-DD hh:mm:ss
period_end_1 <- "2019-02-24 07:00:00" # YYYY-MM-DD hh:mm:ss
#+ echo = FALSE, fig.height = 3
source("plot-subset.R")
low = which(abs(cor_rezult) < 0.5)
low
cor_rezult[low] = 0
cor_rezult[,low] = 0
cor_rezult
low
cor_rezult[low,] = 0
cor_rezult
cor_rezult = round(cor_rezult,2)
colnames(cor_rezult) = "correlation"
time_start = d2_discrete_subset$timestamp[1:(length(d2_discrete_subset$timestamp)-dw)]
time_end = time_start + dw*step_size
low = which(abs(cor_rezult) < 0.5)
cor_rezult[low,] = 0
results = cbind("time start" = as.character(time_start), "time end" = as.character(time_end), cor_rezult)
x = d2_discrete_subset$timestamp[1:(length(d2_discrete_subset$timestamp)-dw)]
# y = d2_discrete_subset$value[1:(length(d2_discrete_subset$value)-dw)]
y = d2_smoth[1:(length(d2_smoth)-dw)]
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = x, y = y
, name = "smothed signal")
fig <- fig %>% add_bars(x = x, y = cor_rezult[,1]
, size = abs(cor_rezult[,1])
, sizes = c(0,0.2)
, name = "correlation", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="time")
)
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = x, y = y
, name = "smothed signal")
fig <- fig %>% add_markers(x = x, y = cor_rezult[,1]
, size = abs(cor_rezult[,1])
, sizes = c(0,0.2)
, name = "correlation", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="time")
)
fig
dw = length(d1_smoth)
from = 1
to = dw
i=1
cor_rezult = data.frame()
while(to < length(d2_smoth)){
# cat("\n",i,"/",(length(d2_smoth)-dw), "\n")
cor_rezult = rbind(cor_rezult, cor(d1_smoth, d2_smoth[from:to]))
from = from + 1
to = to + 1
i=i+1
}
cor_rezult = round(cor_rezult,2)
colnames(cor_rezult) = "correlation"
time_start = d2_discrete_subset$timestamp[1:(length(d2_discrete_subset$timestamp)-dw)]
time_end = time_start + dw*step_size
low = which(abs(cor_rezult) < 0.6)
cor_rezult[low,] = 0
results = cbind("time start" = as.character(time_start), "time end" = as.character(time_end), cor_rezult)
# plot(cor_rezult[,1], type = 'h')
# one = which(cor_rezult < -0.8)
# two = which(cor_rezult >= -0.8 & cor_rezult < -0.5 )
# three = which(cor_rezult >= 0.5 & cor_rezult < 0.8 )
# four = which(cor_rezult >= 0.8)
x = d2_discrete_subset$timestamp[1:(length(d2_discrete_subset$timestamp)-dw)]
# y = d2_discrete_subset$value[1:(length(d2_discrete_subset$value)-dw)]
y = d2_smoth[1:(length(d2_smoth)-dw)]
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = x, y = y
, name = "smothed signal")
fig <- fig %>% add_markers(x = x, y = cor_rezult[,1]
# , size = abs(cor_rezult[,1])
# , sizes = c(0,0.2)
, name = "correlation", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="time")
)
fig
#'
#' ## Load data
#'
#+ echo = F, message = F
source("packages.R")
sensor_id_1 <- 'T7_800_R6292' # define 1st sensor
sensor_id_2 <- 'T7_800_R6292' # define 2nd sensor
#' Define period for vector **to learn** in first signal
period_start_1 <- "2019-02-12 03:38:00" # YYYY-MM-DD hh:mm:ss
period_end_1 <- "2019-02-12 03:46:00" # YYYY-MM-DD hh:mm:ss
#' Define period from second signal where to **find learned** signal
period_start_2 <- "2019-02-24 12:00:00" # YYYY-MM-DD hh:mm:ss
period_end_2 <- "2019-02-25 12:00:00" # YYYY-MM-DD hh:mm:ss
step_size = 4 # step size for discretization in seconds
#+ echo = FALSE
same_period = F # T for same period measuring
# Load data
plot = FALSE
# echo=F, message=F
source("load_rhdf5.R")
#+ echo = FALSE, fig.height = 3
source("plot-subset.R")
#' \pagebreak
#' ## Statistics table
#+ echo = FALSE
source("statistic_table.R")
DT::datatable(stat, caption = "Statistics table" )
#+ echo=F, fig.height = 3
source("discretize.R")
#'
#' ***
#'
#' ## Generalized Additive Model
#+ echo=F
source("GMA.R")
#+ echo=F
# len_model = min(length(model$fitted.values), length(model2$fitted.values))
# cor(model$fitted.values[1:len_model], model2$fitted.values[1:len_model])
par(mfrow=c(1,1))
#' \pagebreak
#' ## Correlation
#+ echo=FALSE, message = F
source("auto-correlation.R")
#+ echo=F, message=F, out.width = "120%", out.height = "100%"
fig
plot(d1_discrete_subset$value,col ="darksalmon", type = 'l',lwd=2
,ylim = c(yMin, yMax)
,main = "1-st subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model$fitted.values, col = 'darkred', lwd =3, lty = 2)
length(t)
# Build the model
model <- gam(value ~ s(t, k = 25, bs = 'ps'), data = d1_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
yMin = min(d1_smoth, d2_smoth)
yMax = max(d1_smoth, d2_smoth)
plot(d1_discrete_subset$value,col ="darksalmon", type = 'l',lwd=2
,ylim = c(yMin, yMax)
,main = "1-st subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model$fitted.values, col = 'darkred', lwd =3, lty = 2)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
model2 <- gam(value ~ s(t2, k = 200, bs = 'ps'), data = d2_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
yMin = min(d1_smoth, d2_smoth)
yMax = max(d1_smoth, d2_smoth)
plot(d1_discrete_subset$value,col ="darksalmon", type = 'l',lwd=2
,ylim = c(yMin, yMax)
,main = "1-st subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model$fitted.values, col = 'darkred', lwd =3, lty = 2)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
period_end_2 <- "2019-02-25 00:00:00" # YYYY-MM-DD hh:mm:ss
d2_discrete_subset <- subset(d2_discrete, d2_discrete$timestamp > period_start_2
& d2_discrete$timestamp < period_end_2)
t = seq(1:length(d1_discrete_subset$value))
t2 = seq(1:length(d2_discrete_subset$value))
# 1 day, k=200
##### GENERALIZED ADDITIVE MODELS
#+ echo=F
if(length(t) < 100){
k1 = 25
} else {k1=100}
# Build the model
model <- gam(value ~ s(t, k = k1, bs = 'ps'), data = d1_discrete_subset, method = "REML")
model2 <- gam(value ~ s(t2, k = 200, bs = 'ps'), data = d2_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
yMin = min(d1_smoth, d2_smoth)
yMax = max(d1_smoth, d2_smoth)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
model2 <- gam(value ~ s(t2, k = 100, bs = 'ps'), data = d2_discrete_subset, method = "REML")
d2_smoth = model2$fitted.values
lines(model2$fitted.values, col = 'darkblue', lwd =3, lty = 2)
model2 <- gam(value ~ s(t2, k = 500, bs = 'ps'), data = d2_discrete_subset, method = "REML")
model2 <- gam(value ~ s(t2, k = 50, bs = 'ps'), data = d2_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
yMin = min(d1_smoth, d2_smoth)
yMax = max(d1_smoth, d2_smoth)
plot(d1_discrete_subset$value,col ="darksalmon", type = 'l',lwd=2
,ylim = c(yMin, yMax)
,main = "1-st subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model$fitted.values, col = 'darkred', lwd =3, lty = 2)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
model2 <- gam(value ~ s(t2, k = 200, bs = 'ps'), data = d2_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
lines(model2$fitted.values, col = 'green', lwd =2, lty = 2)
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
period_end_2 <- "2019-02-26 12:00:00" # YYYY-MM-DD hh:mm:ss
d2_discrete_subset <- subset(d2_discrete, d2_discrete$timestamp > period_start_2
& d2_discrete$timestamp < period_end_2)
model2 <- gam(value ~ s(t2, k = 250, bs = 'ps'), data = d2_discrete_subset, method = "REML")
t2 = seq(1:length(d2_discrete_subset$value))
model2 <- gam(value ~ s(t2, k = 250, bs = 'ps'), data = d2_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
yMin = min(d1_smoth, d2_smoth)
yMax = max(d1_smoth, d2_smoth)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
#' Define period from second signal where to **find learned** signal
period_start_2 <- "2019-02-24 12:00:00" # YYYY-MM-DD hh:mm:ss
period_end_2 <- "2019-02-27 12:00:00" # YYYY-MM-DD hh:mm:ss
d2_discrete_subset <- subset(d2_discrete, d2_discrete$timestamp > period_start_2
& d2_discrete$timestamp < period_end_2)
t = seq(1:length(d1_discrete_subset$value))
t2 = seq(1:length(d2_discrete_subset$value))
model2 <- gam(value ~ s(t2, k = 250, bs = 'ps'), data = d2_discrete_subset, method = "REML")
# coef(model)
# coef(model2)
d1_smoth = model$fitted.values
d2_smoth = model2$fitted.values
yMin = min(d1_smoth, d2_smoth)
yMax = max(d1_smoth, d2_smoth)
plot(d1_discrete_subset$value,col ="darksalmon", type = 'l',lwd=2
,ylim = c(yMin, yMax)
,main = "1-st subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model$fitted.values, col = 'darkred', lwd =3, lty = 2)
plot(d2_discrete_subset$value,col =8, type = 'l', lwd=2
,ylim = c(yMin, yMax)
,main = "2-nd subset smoothed"
,xlab = "t"
,ylab = "value")
lines(model2$fitted.values, col = 'darkred', lwd =3, lty = 2)
model_coef = data.frame(model$coefficients)
model2_coef = data.frame(model2$coefficients)
dw = length(d1_smoth)
from = 1
to = dw
i=1
cor_rezult = data.frame()
cat("\n",i,"/",(length(d2_smoth)-dw), "\n")
cor_rezult = data.frame()
while(to < length(d2_smoth)){
cat("\n",i,"/",(length(d2_smoth)-dw), "\n")
cor_rezult = rbind(cor_rezult, cor(d1_smoth, d2_smoth[from:to]))
from = from + 1
to = to + 1
i=i+1
}
cor_rezult = round(cor_rezult,2)
colnames(cor_rezult) = "correlation"
time_start = d2_discrete_subset$timestamp[1:(length(d2_discrete_subset$timestamp)-dw)]
time_end = time_start + dw*step_size
low = which(abs(cor_rezult) < 0.85)
cor_rezult[low,] = 0
results = cbind("time start" = as.character(time_start), "time end" = as.character(time_end), cor_rezult)
x = d2_discrete_subset$timestamp[1:(length(d2_discrete_subset$timestamp)-dw)]
# y = d2_discrete_subset$value[1:(length(d2_discrete_subset$value)-dw)]
y = d2_smoth[1:(length(d2_smoth)-dw)]
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = x, y = y
, name = "smothed signal")
fig <- fig %>% add_bars(x = x, y = cor_rezult[,1]
, size = abs(cor_rezult[,1])
, sizes = c(0,0.1)
, name = "correlation", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="time")
)
fig
t2
period_end_2 <- "2019-02-25 00:00:00" # YYYY-MM-DD hh:mm:ss
d2_discrete_subset <- subset(d2_discrete, d2_discrete$timestamp > period_start_2
& d2_discrete$timestamp < period_end_2)
t2 = seq(1:length(d2_discrete_subset$value))
t2
5000 < length(t2) < 10000
t = t[1:7000]
# 12h , k=200
# 24h, 48h k = 250
##### GENERALIZED ADDITIVE MODELS
#+ echo=F
if(length(t) < 100){
k1 = 30
} else {k1=100}
if(length(t2) >= 10000){
k2=250
}else{
if(length(t2) > 5000){
k2=200
}else{k2=150}
}
t
t2 = t2[1:7000]
# 12h , k=200
# 24h, 48h k = 250
##### GENERALIZED ADDITIVE MODELS
#+ echo=F
if(length(t) < 100){
k1 = 30
} else {k1=100}
if(length(t2) >= 10000){
k2=250
}else{
if(length(t2) > 5000){
k2=200
}else{k2=150}
}
t2 = t2[1:3000]
# 12h , k=200
# 24h, 48h k = 250
##### GENERALIZED ADDITIVE MODELS
#+ echo=F
if(length(t) < 100){
k1 = 30
} else {k1=100}
if(length(t2) >= 10000){
k2=250
}else{
if(length(t2) > 5000){
k2=200
}else{k2=150}
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = x, y = y
, name = "smothed signal")
fig <- fig %>% add_bars(x = x, y = cor_rezult[,1]
, size = abs(cor_rezult[,1])
, sizes = c(0,0.1)
, name = "correlation", yaxis = "y2")
fig <- plot_ly()
fig <- fig %>% add_lines(x = x, y = y
, name = "smothed signal")
fig <- fig %>% add_bars(x = x, y = cor_rezult[,1]
, size = abs(cor_rezult[,1])
, sizes = c(0,0.1)
, name = "correlation", yaxis = "y2"
, ymin = -1.5
, ymax = 1.5)
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="time")
)
fig
